@name E2 Proxy
@inputs [Reset]

@outputs State

@persist URL:string URLHash

@persist HttpData:string HttpDataLen #interval HTTP variables
@persist DataToWrite:string DataToWriteLen

@persist FileLoaded FileRead:string FileReadLength

@persist FilePartCount FileCurrentPart
@persist [FileCurrentSubStart FileCurrentSubLen] [FileCurrentSub]:string
@outputs FileMultiplePartsToWrite FileCurrentPartName:string


@persist [PROGRAM_NAME]:string #constants
@persist FILE_MAXSIZE [FILE_OUT_PREFIX, FILE_COMM]:string #constants (file-related)

# Unused variables
#@persist FileCurrentSubHash HttpDataHash DataToWriteHash
#@persist [DO_OPTIMISE]
#@persist [NEWLINE URL_INVALID]:string
#@persist E:entity

# Rewritten in 2018, 2023
# Rev3

#THIS IS A BETA BUILD, BUGS EASILY MAY BE PRESENT
#Current limitations:
# * Very limited hashing (as E2 inbuilt hashing is slow)
# * No silent-mode
# * No concmd optimisations inbuilt (not sure if needed)

# SIGNALS
# 0 - OK
# 2 - Success: URL access
# 4 - Bad URL (short for error 404)
# 5 - Segmentation fault (server error)
# 9 - Success: Overall task

runOnFile(1)
runOnHTTP(1)
interval(1)

if(first())
{
    #E = entity()
    #E:setAlpha(0)

    PROGRAM_NAME = "E2XY" #EE-two-xie
    #URL_INVALID = "0.0.0.0"

    #NEWLINE = toChar(10)

    FILE_OUT_PREFIX = "proxy_out"
    FILE_COMM = "proxy_comm.txt"

    FILE_MAXSIZE = fileMaxSize() * 1024 #1024, not 1000. More info on https://github.com/wiremod/wire/blob/master/lua/entities/gmod_wire_expression2/core/files.lua
    #DO_OPTIMISE = 1 #Allow in-game local variables manipulation for optimisation

    function setState(N)
    {
        State = N
    }

    function incState(){setState(State+1)}

    function printStd(Prefix:string, Msg:string)
    {
        print("["+PROGRAM_NAME+":"+Prefix+"] "+Msg)
    }

    function reload()
    {
        setState(0)

        FilePartCount = 0
        FileMultiplePartsToWrite = 0 #by default

        Reset=0
    }

    function sendSignal(S:string)
    {
        fileWrite(FILE_COMM, S)
    }

    function string num2hex(N) # Number to 32-bit hex
    {
        return format("%08x", N)
    }

    function string generate_FN_Part_Name(Base:string, BaseHash, CurrentPart, MaxPart)
    {
        if(MaxPart < 1)
        {
            printStd("Error", "Invalid parts amount, things can be very wrong!")
        }

        return format("%s.%08x.%x-%x.txt",
            Base, BaseHash, CurrentPart, MaxPart
        )
    }

    reload()

}

if(Reset){reload()}
autoPerf(1)

switch(State)
{
    case 0,
        #fileCanWrite will be very useful in the next few cases
        if(fileCanLoad() & fileCanWrite())
        {
            fileLoad(FILE_COMM)
            incState()
        }
        break
    case 1,
        FileLoaded = fileClk()

        if(FileLoaded)
        {
            FileRead = fileRead()
            FileReadLength = FileRead:length()

            if(FileReadLength > 1) # something is for input, and it's not a signal
            {
                URL = FileRead
                URLHash = hash(URL)
                incState()
            }
            elseif (!fileLoaded() & !fileLoading())
            {
                sendSignal("0")
                printStd("All good", "Comm file was not present, so we created it")
                reload()
            }
            else #no input (yet)
            {
                printStd("Idle", "No input (yet)")
                reload()
            }
        }
        break
    case 2,
        #Run the internet request
        if(httpCanRequest()){
            httpRequest(URL)
            incState()
        }
        break
    case 3,
        #Wait for the response
        HttpData = httpData()

        HttpDataLen = HttpData:length()

        if (HttpDataLen)
        {
            printStd("Process", "Data retrieved, now saving...")
            sendSignal("2")
            incState()
        }
        elseif (!HttpDataLen & httpCanRequest()) #If loading error
        {
            printStd("Error", "Page not found")
            sendSignal("4")
            reload()
        }
        break
    case 4,
        #generate stats for the retrieved data, could be very laggy
        DataToWrite = httpUrlEncode(HttpData) #Binary-to-text, E2 internal implementation
        DataToWriteLen = DataToWrite:length() #this variable will be VERY useful in the future

        incState()
        break
    case 5,
        #generate stats for file parts (1 layer down)
        FileCurrentPart = 1
        FilePartCount = ceil(DataToWriteLen/FILE_MAXSIZE) #ceil, not floor!
        FileMultiplePartsToWrite = FilePartCount > 1 #not necessary per se, just to make my life easier

        incState()
        break
    case 6,    #generate stats for the current file part

        if(FileMultiplePartsToWrite)
        {
            # I reckon this WILL cause heavy lags since we manipulate large strings
            # but what can we do?

            #REMEMBER: sub() starts counting from 1
            #Syntax: string:Sub(StartingPoint, AmountOfChars)
            FileCurrentSubStart = ((FileCurrentPart-1)*FILE_MAXSIZE)+1
            FileCurrentSubLen = min( (FileCurrentPart * FILE_MAXSIZE), DataToWriteLen )
            FileCurrentSub = DataToWrite:sub(FileCurrentSubStart, FileCurrentSubLen)
        }


        incState()
        break
    case 7, #wait until we are ready for the next step
        if(fileCanWrite())
        {
            if (FileMultiplePartsToWrite)
            {
                FileCurrentPartName = generate_FN_Part_Name(FILE_OUT_PREFIX, URLHash,
                    FileCurrentPart, FilePartCount
                )
            }
            else
            {
                FileCurrentPartName = generate_FN_Part_Name(FILE_OUT_PREFIX, URLHash,
                    1, 1
                )
            }
            incState()
        }
        break
    case 8, #write to the file part
        if (FileMultiplePartsToWrite)
        {
            if(FileCurrentPart <= FilePartCount)
            {
                fileWrite(FileCurrentPartName, FileCurrentSub)
                FileCurrentPart++
            }

            #this is a post check, so the next time we
            #don't wait for the fileCanWrite to become 1,
            #which could take another 3-5 seconds
            if(FileCurrentPart > FilePartCount)
            {
                incState()
            }
            else
            {
                setState(State-2) # To: generate stats for the current file part
            }

        }
        else
        {
            fileWrite(FileCurrentPartName, DataToWrite)
            incState()
        }
        break
    case 9, #finishing up
        if(fileCanWrite())
        {
            sendSignal("9")
            printStd("Notification", "Task completed")
            reload()
        }
    default,
        break
}
